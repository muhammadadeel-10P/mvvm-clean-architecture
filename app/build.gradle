plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
    id 'jacoco'
}



def secureProps = new Properties()


if (file("../secure.properties").exists()) {
    file("../secure.properties")?.withInputStream { secureProps.load(it) }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled  true
        html.enabled  true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}


android {
    compileSdk 32

    defaultConfig {
        applicationId "com.inc.clean_architecturemvvm"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"
        resValue "string", "times_api_key", (secureProps.getProperty("API_KEY_SECURE") ?: "")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        // testInstrumentationRunnerArguments clearPackageData: 'true'

    }


    /* testOptions {
         execution 'ANDROIDX_TEST_ORCHESTRATOR'
     }*/

    buildTypes {

        debug{
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }



    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }



    buildFeatures {
        dataBinding true
        viewBinding true
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.18.1"
        }
    }

    ndkVersion '24.0.8215888'

}


dependencies {

    //android core libraries
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:1.2.1"

    //  coroutines thread managment library
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1'

    //ViewModel and livedata
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"


    //Retrofit
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'


    //def nav_version = "2.4.2"
    // navigation graph Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.1"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.1"


    //DI hilt
    implementation "com.google.dagger:hilt-android:2.42"
    kapt "com.google.dagger:hilt-android-compiler:2.42"


    implementation 'com.squareup.picasso:picasso:2.8'

    /**
     * Unit test & instrumental test Libraries
     * https://developer.android.com/jetpack/androidx/releases/test
     * **/


    testImplementation 'junit:junit:4.13.2'

/**
 * Kluent for Assertion Test Cases ,for koltin only
 */

    testImplementation 'org.amshove.kluent:kluent-android:1.68'
    testImplementation 'org.amshove.kluent:kluent:1.68'
    testImplementation 'org.mockito:mockito-core:4.0.0'



    // To use the androidx.test.core APIs
    androidTestImplementation "androidx.test:core:1.4.0"
    // Kotlin extensions for androidx.test.core
    androidTestImplementation "androidx.test:core-ktx:1.4.0"

    // To use the androidx.test.espresso
   // androidTestImplementation "androidx.test:espresso:espresso-core:3.4.0"

    // To use the JUnit Extension APIs
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    // Kotlin extensions for androidx.test.ext.junit
    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.3"

    // To use the androidx.test.runner APIs
    androidTestImplementation "androidx.test:runner:1.4.0"


    /*

    // To use android test orchestrator
    androidTestUtil "androidx.test:orchestrator:1.4.1"



    //Mockk
    testImplementation "io.mockk:mockk:1.12.4"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:4.9.3"

   //Mockito
    testImplementation "org.mockito:mockito-core:4.0.0"
    testImplementation "org.mockito:mockito-inline:4.0.0"
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0'

    // ...with Kotlin.
    kaptTest("com.google.dagger:hilt-android-compiler:2.42")
    // For instrumented tests.
    androidTestImplementation("com.google.dagger:hilt-android-testing:2.38.1")

*/

    //androidTestImplementation "com.google.truth:truth::0.40"

}